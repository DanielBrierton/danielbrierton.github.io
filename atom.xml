<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Daniel Brierton</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://daniel.brierton.me/"/>
  <updated>2016-07-24T22:15:47.000Z</updated>
  <id>https://daniel.brierton.me/</id>
  
  <author>
    <name>Daniel Brierton</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Streamlining UI Integration Tests with Promises</title>
    <link href="https://daniel.brierton.me/streamlining-ui-integration-tests-with-promises/"/>
    <id>https://daniel.brierton.me/streamlining-ui-integration-tests-with-promises/</id>
    <published>2015-10-28T00:00:00.000Z</published>
    <updated>2016-07-24T22:15:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>Writing integration tests for your UIs in JavaScript can get messy fast. You start off with some nice simple tests, and before you know it you’re in callback hell. By taking a step back and better structuring your tests and utilising the power of Promises though, you can avoid this. This post outlines how we tackled this problem and have made it quicker, easier, and cleaner to write integration tests in JavaScript.</p>
<a id="more"></a>
<p>For the purpose of this post, I’ll be using <a href="https://mochajs.org/" target="_blank" rel="external">Mocha</a> as my test runner, and you can assume waitForElement asynchronously waits for an element to be visible in the DOM. You should be easily able to adapt this to your favourite test runner. If you’re new to promises, I recommend you take a look at <a href="http://www.html5rocks.com/en/tutorials/es6/promises/" target="_blank" rel="external">Jake Archibalds primer on Promises on HTML5 Rocks</a>.</p>
<p>Let’s dive in. If you’ve ever written integration tests for some asynchronous JavaScript, you’ve probably written something like this.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">it(<span class="string">'Valid search should return results'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</div><div class="line">    waitForElement(<span class="string">'#searchField'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">searchField</span>) </span>&#123;</div><div class="line">        searchField.value = <span class="string">'mySearch'</span>;</div><div class="line">        <span class="keyword">var</span> <span class="built_in">document</span>.getElementById(<span class="string">'searchButton'</span>);</div><div class="line">        searchButton.click();</div><div class="line">    </div><div class="line">        waitForElement(<span class="string">'#results'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">results</span>) </span>&#123;</div><div class="line">            <span class="comment">// ASSERTIONS</span></div><div class="line">            done();</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>This is a simple example, but it could get worse as you write more complicated tests. As with most asynchronous code, we can improve the readability by using promises. With very little work, we can change our code to use promises.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">it(<span class="string">'Valid search should return results'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</div><div class="line">    waitForElement(<span class="string">'#searchField'</span>)</div><div class="line">        .then(<span class="function"><span class="keyword">function</span> (<span class="params">searchField</span>) </span>&#123;</div><div class="line">            searchField.value = <span class="string">'mySearch'</span>;</div><div class="line">            <span class="keyword">var</span> <span class="built_in">document</span>.getElementById(<span class="string">'searchButton'</span>);</div><div class="line">            searchButton.click();</div><div class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve();</div><div class="line">        &#125;)</div><div class="line">        .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> waitForElement(<span class="string">'#results'</span>);</div><div class="line">        &#125;)</div><div class="line">        .then(<span class="function"><span class="keyword">function</span> (<span class="params">results</span>) </span>&#123;</div><div class="line">            <span class="comment">// ASSERTIONS</span></div><div class="line">        &#125;)</div><div class="line">        .then(done);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Ok, it’s a little better. It gets past the nesting of callbacks, and each one does a specific function now, but it still looks a little messy. We’ll also end up rewriting most of this code over and over again.</p>
<p>For this, we want to simplify repeated actions. We can start by abstracting our view. This will give us more readable code, as well as making it easier to make small changes, whether it’s to IDs or class names. We can also create a few utility methods for common interactions.</p>
<h6 id="ViewModel"><a href="#ViewModel" class="headerlink" title="ViewModel"></a>ViewModel</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ViewModel = &#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Waits for the search field</div><div class="line">     * </div><div class="line">     * @method getSearchField</div><div class="line">     * @returns &#123;Promise&#125; promise</div><div class="line">     */</div><div class="line">    getSearchField: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> waitForElement(<span class="string">'#searchField'</span>);</div><div class="line">    &#125;,</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Waits for the search button</div><div class="line">     * </div><div class="line">     * @method getSearchButton</div><div class="line">     * @returns &#123;Promise&#125; promise</div><div class="line">     */</div><div class="line">    getSearchButton: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> waitForElement(<span class="string">'#searchButton'</span>);</div><div class="line">    &#125;,</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Waits for the results</div><div class="line">     * </div><div class="line">     * @method getResults</div><div class="line">     * @returns &#123;Promise&#125; promise</div><div class="line">     */</div><div class="line">    getResults: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> waitForElement(<span class="string">'#results'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h6 id="CommonActions"><a href="#CommonActions" class="headerlink" title="CommonActions"></a>CommonActions</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> CommonActions = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns a function to be used as a test step to set the value of the element from the previous test step.</div><div class="line">     *</div><div class="line">     * @method setValue</div><div class="line">     * @param &#123;String&#125; val</div><div class="line">     * @returns &#123;Function&#125; testStep</div><div class="line">     */</div><div class="line">    setValue: <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</div><div class="line">            el.value = val;</div><div class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve();</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Clicks the provided element</div><div class="line">     * </div><div class="line">     * @method click</div><div class="line">     * @param &#123;HTMLElement&#125; el</div><div class="line">     * @returns &#123;Promise&#125; promise</div><div class="line">     */</div><div class="line">    click: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</div><div class="line">        el.click();</div><div class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve();</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>Once we have this set up, we can further streamline our test.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">it(<span class="string">'Valid search should return results'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</div><div class="line">    ViewModel.getSearchField()</div><div class="line">        .then(CommonActions.setValue(<span class="string">'mySearch'</span>))</div><div class="line">        .then(ViewModel.getSearchButton)</div><div class="line">        .then(CommonActions.click)</div><div class="line">        .then(ViewModel.getResults)</div><div class="line">        .then(<span class="function"><span class="keyword">function</span> (<span class="params">results</span>) </span>&#123;</div><div class="line">            <span class="comment">// ASSERTIONS</span></div><div class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve();</div><div class="line">        &#125;)</div><div class="line">        .then(done);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>This is much more readable than our first test, as it basically reads as plain English. However, I wanted more flexibility, so I decided to take this further. I wrote a few functions to easier handle the lifecycle of the test. It might seem a little over the top at first, but bear with me. The comments explain what it does.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Ensure that the argument provided is usable in a chain of promises regardless of type.</div><div class="line"> * </div><div class="line"> * @method promisify</div><div class="line"> * @param &#123;*&#125; resp</div><div class="line"> * @returns &#123;Promise&#125; promise</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">promisify</span>(<span class="params">resp</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> resp &amp;&amp; resp.constructor === <span class="built_in">Promise</span> ? resp : <span class="built_in">Promise</span>.resolve(resp);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Check if argument is a function</div><div class="line"> *</div><div class="line"> * @method isFunction</div><div class="line"> * @param &#123;*&#125; functionToCheck</div><div class="line"> * @returns &#123;Boolean&#125; isFunction</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFunction</span>(<span class="params">functionToCheck</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> getType = &#123;&#125;;</div><div class="line">    <span class="keyword">return</span> functionToCheck &amp;&amp; getType.toString.call(functionToCheck) === <span class="string">'[object Function]'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Runs a set of test steps passed in as an array.</div><div class="line"> *</div><div class="line"> * @method runTestSteps</div><div class="line"> * @param &#123;Array&#125; testSteps</div><div class="line"> * @return &#123;Promise&#125; lastPromise</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">runTestSteps</span>(<span class="params">testSteps</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> lastPromise = <span class="built_in">Promise</span>.resolve(); <span class="comment">// Just to chain off of</span></div><div class="line">    testSteps.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">testStep</span>) </span>&#123;</div><div class="line">        lastPromise.catch(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">            <span class="comment">// Unfortunately need to do this to get a proper stack trace in mocha</span></div><div class="line">            requestAnimationFrame(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">throw</span> e;</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line">        lastPromise = lastPromise.then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (isFunction(testStep)) &#123;</div><div class="line">                <span class="comment">// If testStep is a function, process as a normal promise</span></div><div class="line">                <span class="keyword">return</span> promisify(testStep.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>));</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (testStep &amp;&amp; testStep.constructor === <span class="built_in">Array</span>) &#123;</div><div class="line">                <span class="comment">// Recurse if it's an array</span></div><div class="line">                <span class="keyword">return</span> runTestSteps(testStep);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// Just resolve with the value of testStep isn't a function or array</span></div><div class="line">                <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(testStep);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> lastPromise;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Now that we’ve set up this boilerplate, we can define our tests with a simple array of test steps. We can also get rid of any “return Promise.resolve()”s we have, and can even call methods directly in our test steps that just return regular values. We can also bundle tests steps into functions for reuse.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Get the set of test steps to perform a search</div><div class="line"> *</div><div class="line"> * @method searchTestSteps</div><div class="line"> * @param &#123;String&#125; searchTerm</div><div class="line"> * @returns &#123;Array&#125; testSteps</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">searchTestSteps</span>(<span class="params">searchTerm</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> [</div><div class="line">        ViewModel.getSearchField,</div><div class="line">        CommonActions.setValue(searchTerm),</div><div class="line">        ViewModel.getSearchButton,</div><div class="line">        CommonActions.click</div><div class="line">    ];</div><div class="line">&#125;</div><div class="line"></div><div class="line">it(<span class="string">'Valid search should return results'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</div><div class="line">    runTestSteps([</div><div class="line">        search(<span class="string">'validSearch'</span>),</div><div class="line">        ViewModel.getResults,</div><div class="line">        <span class="function"><span class="keyword">function</span> (<span class="params">results</span>) </span>&#123;</div><div class="line">            <span class="comment">// ASSERTIONS</span></div><div class="line">        &#125;,</div><div class="line">        done</div><div class="line">    ]);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Now that we have everything nicely abstracted, we can very easily add another test for an invalid search.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">it(<span class="string">'Invalid search should return results'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</div><div class="line">    runTestSteps([</div><div class="line">        search(<span class="string">'invalidSearch'</span>),</div><div class="line">        ViewModel.getResults,</div><div class="line">        <span class="function"><span class="keyword">function</span> (<span class="params">results</span>) </span>&#123;</div><div class="line">            <span class="comment">// ASSERTIONS</span></div><div class="line">        &#125;,</div><div class="line">        done</div><div class="line">    ]);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>And that’s about it. I hope this helps you write simpler, quicker UI integration tests. Any questions or feedback, sound off in the comments, or hit me up on Twitter <a href="https://twitter.com/DanielBrierton" target="_blank" rel="external">@DanielBrierton</a>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Writing integration tests for your UIs in JavaScript can get messy fast. You start off with some nice simple tests, and before you know it you’re in callback hell. By taking a step back and better structuring your tests and utilising the power of Promises though, you can avoid this. This post outlines how we tackled this problem and have made it quicker, easier, and cleaner to write integration tests in JavaScript.&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript, Testing, Promises" scheme="https://daniel.brierton.me/tags/JavaScript-Testing-Promises/"/>
    
  </entry>
  
  <entry>
    <title>My Google I/O 2014 Hopes and Predictions</title>
    <link href="https://daniel.brierton.me/my-google-io-2014-hopes-and-predictions/"/>
    <id>https://daniel.brierton.me/my-google-io-2014-hopes-and-predictions/</id>
    <published>2014-06-16T23:00:00.000Z</published>
    <updated>2016-07-24T22:18:41.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/my-google-io-2014-hopes-and-predictions/googleio2014.png" alt="Google I/O 2014"></p>
<p><a href="https://www.google.com/events/io" target="_blank" rel="external">Google I/O</a> is just around the corner, so it’s time for my one post of the year (who knows, maybe I’ll buck the trend and become a bit more active). Last years predictions were pretty inaccurate, and these may be just as bad, but hey, speculation is fun, and it like I said last year, it’s more of a wishlist than anything else. So, let’s dive right in.</p>
<a id="more"></a>
<h1 id="Android-Wear"><a href="#Android-Wear" class="headerlink" title="Android Wear"></a>Android Wear</h1><p>First up, a topic that’s already been confirmed. We’ll likely get further details on the LG G Watch, and maybe the Moto 360. <a href="http://www.android.com/wear/" target="_blank" rel="external">Android Wear</a> (or at least what’s been released to developers so far) is pretty basic, being little more than a card representation of your notification shade, with some extra APIs for interacting with those notifications on the watch. It’s a lot like Google Glass, some might even say identical. I think it makes sense for Google Glass to transition to running Android Wear, and for the Google Glass APIs to be deprecated in favour of Android Wear’s. Android Wear is significantly simpler, and can even work without an internet connection, unlike Glass. It just doesn’t make sense to maintain both in my eyes.</p>
<p>I hope Google elaborate on what OEMs can customise in Wear for their wearables, and who owns the updates. Personally I’d like to see them having minimal customisation opportunities, and for Google to handle updates. We might get that from LG and Motorola for their first devices, essentially making them Google Play Edition devices, but I’d be a bit surprised if Google took that much control over the software for future devices.</p>
<p>Not much else that can be said about Android Wear. I just look forward to the launch, and if the price is right, I’ll certainly be an early adopter.</p>
<h1 id="Android-TV"><a href="#Android-TV" class="headerlink" title="Android TV"></a>Android TV</h1><p>Goodbye Google TV, hello brand spanking new Android TV. Google TV hasn’t had a good life, always living as a sort of unloved step-child of Google, even with competition from Google in the form of Chromecast. Google said at I/O last year that they were finally going to <a href="http://www.theverge.com/2013/5/17/4341684/google-tv-silent-but-not-forgotten-at-i-o-2013" target="_blank" rel="external">merge the Google TV fork into the Android Open Source Project (AOSP)</a>, and now, a year later, perhaps it’s finally time. Android TV and its Pano UI have <a href="http://www.theverge.com/2014/4/5/5584604/this-is-android-tv" target="_blank" rel="external">already been leaked</a>, and the UI looks pretty polished. There’s nothing on the sessions agenda for Google/Android TV however, and there isn’t really anything it will properly fit into, so there’s a chance it might not make an appearance. I’m not sure if Google have a record of adding new sessions after the keynote, so we’ll see how this Panos out… Sorry…</p>
<p>If they DO reveal it though, I expect that the focus will be on two things - media, and games. They will need the likes of Netflix and Hulu, among other VoD services on board to succeed. The ability to act as a Chromecast was already <a href="http://www.theverge.com/2013/7/25/4556420/google-tv-update-to-add-google-cast-streaming-support" target="_blank" rel="external">announced by Google last year</a>, but I suspect they may provide some extra APIs on top of the experience. I have a smart Blu-ray player, which of course has Netflix support. The interesting thing, is that in Netflix on my phone, it shows up as a cast device. When I cast to it, I can still use my Blu-ray remote to play, pause, stop, and so on. Seems like a good idea for Google to include support like this in Android. Cast a Netflix video to Android TV, then take over control with the remote instead of fiddling with your phone.</p>
<p>On the games front, it would be hard to argue about buying a game on my phone, playing it for a bit, then coming home and picking up where I left off on my Android TV. With Google Play Games, this is possible. Perhaps I’d actually play the GTA games I bought and played for about 2 minutes. Android TV could be poised to be <em>the</em>  low cost indie box, and succeed where Ouya failed. The buy once, play everywhere experience could be key to that.</p>
<p>Oh, and Google, if you do reveal Android TV, please please please announce flagship hardware, with day one worldwide availability through the Play Store and retail partners. If you sell Chromecast in a country, you have no excuse not to sell Android TV devices.</p>
<h1 id="Android-in-the-Car"><a href="#Android-in-the-Car" class="headerlink" title="Android in the Car"></a>Android in the Car</h1><p>Not much is known about Android in the Car, or <a href="http://www.theverge.com/2014/1/6/5279116/google-open-automotive-alliance-android-car-announcement" target="_blank" rel="external">Open Automotive Alliance</a> to give it it’s proper name, but I hope Google talk more about it at I/O this year. I hope Google either use MirrorLink or develop their own open standard for Android in the Car. The idea of choosing my car based on my phone or vice versa is ridiculous, so I really want to see all the major players agree on a single way forward. I’m sure there’ll be aftermarket units available, but I’m not even sure if I can fit an aftermarket unit into my car. I’ve searched and can’t find any information on it. Microsoft have already said they’re going to use MirrorLink, but Apple are using their own technology. If Google go with MirrorLink, perhaps Apple will consider having it as an option for Carplay, but I’m not too hopeful.</p>
<p>It’ll probably be a while before I’ll be running Android in my car, but if I can, you can be sure I will.</p>
<h1 id="Android-Home"><a href="#Android-Home" class="headerlink" title="Android @ Home"></a>Android @ Home</h1><p>Another year, another hope that Android @ Home will finally become something. Even though I don’t own a house where I could fit home automation equipment, I just want this to happen. Google’s purchase of Nest might have added focus to Android @ Home, so fingers crossed!</p>
<h1 id="Quantum-Paper"><a href="#Quantum-Paper" class="headerlink" title="Quantum Paper"></a>Quantum Paper</h1><p>This is a relatively recent leak. Or really, the details are relatively recent. There has been leaks of Gmail and Google Calendar UIs that seem to follow this rumoured new UI framework called <a href="http://www.androidpolice.com/2014/06/11/exclusive-quantum-paper-and-googles-upcoming-effort-to-make-consistent-ui-simple/" target="_blank" rel="external">Quantum Paper</a>. Quantum Paper will apparently not be tied to Android, but will instead allow you to build consistent UIs across Android, the web, and even iOS. As Android Police point out, the components that have leaked, along with the screenshots leaked with Project Hera (which I’ll cover later), all match Google’s existing web framework, <a href="http://www.polymer-project.org/" target="_blank" rel="external">Polymer</a>. If Google allow me to write my UIs with Polymer or Polymer-like syntax, I’ll be happy. Having developed both Windows Phone and Android apps, I can say it’s so much easier to do on Windows Phone. Hopefully Quantum Paper will bridge that gap (or maybe even surpass Windows Phone).</p>
<p>I figure this will likely be something outside of the Android OS. The obvious location for it would be the Android Support library, but I’d like to see Google add it to Google Play Services instead. Depending on the size of the framework, it could be quite costly to include in every app that uses it. Put it in Google Play Services and now you can reduce the size of your apps with the trade-off increasing the size of Google Play Services.</p>
<p>Speaking of Google Play Services…</p>
<h1 id="Google-Play-Services"><a href="#Google-Play-Services" class="headerlink" title="Google Play Services"></a>Google Play Services</h1><p>Last year at I/O, we had the announcement of Google Play Games, Android’s answer to iOS’s Game Center. The most interesting thing about Play Games though is that Google made it available for all Android devices from 2.2 (assuming your device had Google Apps). They did this by adding to Google Play Service, a set of services available only to devices authorised by Google to run Google Apps. Google have done this in the past with the Google Maps API, which they added in December 2012.</p>
<p>This year, Google will likely again add new APIs through Play Services. What they’ll add is a bit of a mystery. There’s the rumoured <a href="http://www.androidpolice.com/2014/06/14/google-indeed-prepping-google-play-fitness-for-release-via-new-version-of-play-services/" target="_blank" rel="external">health and fitness APIs</a>, which make a lot more sense to add to Play Services than to the OS. Perhaps if Google do actually finally revive Android @ Home, they could add that, but beyond those, I’m not sure what they’ll add. But I’m excited to find out. Founder of Android Police, Artem Russakovskii <a href="http://www.androidpolice.com/2014/06/14/google-indeed-prepping-google-play-fitness-for-release-via-new-version-of-play-services/#comment-1435612678" target="_blank" rel="external">hinted to me</a> that they have some information they’re compiling into a story at the moment, but no post since.</p>
<h1 id="Android-4-5-5-0"><a href="#Android-4-5-5-0" class="headerlink" title="Android 4.5/5.0"></a>Android 4.5/5.0</h1><p>I’m pretty confident we’ll see a new iteration of Android at I/O, but I’m not convinced it’ll be a 5.0 release. The maturity and flexibility of Android shifts the focus from the Android OS to Google’s Play Services. That said, there will likely be a need for new APIs based on <a href="http://www.androidpolice.com/2014/05/09/rumor-google-exploring-home-screen-overhaul-with-revamped-notification-shade-recents-menu-and-more/" target="_blank" rel="external">some of the leaks that have cropped up</a> over the last few months. Adding new APIs also gives Google the opportunity to reduce the amount of framework changes needed by OEMs to provide users with their custom experience by allowing them to just make their customisations as apps that use these APIs.</p>
<p>Alongside this, I want Google to provide beta and/or developer channels for the Nexus and Google Play edition range of phones. The interest is certainly there from both developers and enthusiasts. Part of what makes new iOS and Windows Phone public releases exciting is the apps that will be updated to utilise new functionality already updated and ready for release when the OTA goes live. Pretty much any Android developer will tell you how they hate testing in an emulator. Having a device running a pre-release version of the OS will allow them to fully test new functionality, and provide bug reports to Google before public release. This is long overdue in my eyes, and I really hope Google realise that and do something about it.</p>
<p>Anyway, onto the API changes I envisage.</p>
<h2 id="Changes-to-notifications"><a href="#Changes-to-notifications" class="headerlink" title="Changes to notifications"></a>Changes to notifications</h2><p>We’ve seen leaks that indicate that Google want to provide a Google experience on Nexus and Google Play edition devices. One of the Google-ified features in these leaks is notifications. Android Police’s sleek reconstruction of what they’ve been shown shows a very Google Now-esque design to notifications, with content split into two sections, with lower priority notifications being demoted to a second screen that you need to swipe to.</p>
<p>This makes perfect sense. I don’t need to see that Tasker and AcDisplay are running every time I look at my notifications. I want to see actionable notifications and little more. Persistent and low priority notifications, such as weather and commute times from Google Now, can be hidden away until wanted. It also fits well into the Android Wear plans. As mentioned above, Android wear relies on notifications for data and actions. Many apps that will want to add data to Android Wear likely won’t want to clutter up your notification tray, so by having a separate section for these kind of notifications, Android Wear and your notification tray can work in harmony without annoying the user.</p>
<p>The sectioned notification tray may be a core part of Android 4.5/5.0 when it launches, but the Google-y design will most certainly not. For this, Google could modify the OS like every other OEM, but that’s not Google’s style. No, they want to be able to update this whenever they want, and they want to decouple it from the OS. Android already has APIs for accessing notifications, which works very well with certain apps. AcDisplay does a great job of showing notification content and actions with a different experience to the notification tray. I think Google could be clever here, and allow developers to create their own notification tray replacements, much like they can with the launcher or SMS app. Google could leverage the same APIs as everyone else to create their custom notification experience, and update it through the Play Store, separate from the OS. A knock-on effect of this is that if OEMs do the same, they now have less to update in Android itself when the next update rolls out. Google could do the same with lock screens too to further decouple the OS.</p>
<h2 id="Multitasking-changes"><a href="#Multitasking-changes" class="headerlink" title="Multitasking changes"></a>Multitasking changes</h2><p>Along with the notification tray customisation, we’ve seen mockups of a new launcher. The launcher incorporates multitasking, but seems to eschew widgets in favour of an iOS-like app grid to the right of the multitasking interface. As with all rumours and leaks, there’s no guarantee that the finished product will be the same. I can’t see Google dropping widgets, and if they make me organise all my apps manually like in iOS, I’ll be pretty pissed. I like my A-Z grid. The new launcher in its currently known form just seems like too much of a change from what users know and love. I highly doubt this mockup will become reality, but I do hope Google figure out how to do this without alienating users too much, because I love the idea of incorporating multitasking into the home screen ever since my Palm Pre 2.</p>
<p>As with the notification experience, I’d imagine Google would add APIs for accessing multitasking data and roll out the new experience through Play Store, maybe even gradually to ween users in.</p>
<h2 id="Project-Hera"><a href="#Project-Hera" class="headerlink" title="Project Hera"></a>Project Hera</h2><p>I’m gonna be totally honest, I have no idea what Project Hera is, or what it aims to accomplish. So I’m not even going to speculate on this. If you want to try make sense of it, check out <a href="http://www.androidpolice.com/2014/04/06/rumor-googles-plan-to-bridge-chrome-android-and-search-to-do-everything-on-your-device/" target="_blank" rel="external">Android Police’s article on it</a>.</p>
<h1 id="Android-Silver"><a href="#Android-Silver" class="headerlink" title="Android Silver"></a>Android Silver</h1><p>Android Silver is interesting, although I hate the name. This seems to be Google’s attempt at getting OEMs to customise less and less. It seems like Google want all manufacturers to operate like Motorola, which sounds very positive to me. I own a Moto G, and shortly after the Google Play edition was announced, I converted mine. But I’ve since reflashed the Motorola ROM. As it turns out, Motorola’s ROM actually offers a better experience on a nearly stock interface. On top of that, it was very quick to get Android 4.4, and has overall been a pleasure to use. Get all major partners on board, and HTC, Samsung, Sony and LG could be slimming down the bloat on their flagships, and providing quicker updates. Both positives in my books.</p>
<p>There is another possibility. It could be a push on Google Play edition devices. The HTC One (M8) Google Play edition isn’t like other Play edition devices. It has HTC’s TV app for using the built-in IR blaster, along with the photo editor app for utilising that second camera on the back. It even includes support for HTC’s DotView case, and gestures you can use to unlock the phone when the screen is off. This sounds like the “Android with no or very limited customizations” <a href="http://www.androidpolice.com/2014/04/02/rumor-android-silver-may-be-googles-attempt-to-finally-provide-a-premium-android-sale-and-support-experience/" target="_blank" rel="external">quoted by Android Police</a>. If this is the case, we could see Google Play edition devices sit alongside the fully customised phones in phone stores. Perhaps they’ll even have official paths to convert between TouchWiz/Sense/etc. and Google Play/Android Silver. One can dream, but I really, really, <strong>really</strong> hope this dream comes true.</p>
<h1 id="Windows-and-Windows-Phone-8-1"><a href="#Windows-and-Windows-Phone-8-1" class="headerlink" title="Windows and Windows Phone 8.1"></a>Windows and Windows Phone 8.1</h1><p>Come on Google, stop pretending that Windows and Windows Phone don’t exist. Please?</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/my-google-io-2014-hopes-and-predictions/googleio2014.png&quot; alt=&quot;Google I/O 2014&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.google.com/events/io&quot;&gt;Google I/O&lt;/a&gt; is just around the corner, so it’s time for my one post of the year (who knows, maybe I’ll buck the trend and become a bit more active). Last years predictions were pretty inaccurate, and these may be just as bad, but hey, speculation is fun, and it like I said last year, it’s more of a wishlist than anything else. So, let’s dive right in.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android, Google" scheme="https://daniel.brierton.me/tags/Android-Google/"/>
    
  </entry>
  
  <entry>
    <title>My Google I/O Hopes and Predictions</title>
    <link href="https://daniel.brierton.me/my-google-io-hopes-and-predictions/"/>
    <id>https://daniel.brierton.me/my-google-io-hopes-and-predictions/</id>
    <published>2013-03-19T00:00:00.000Z</published>
    <updated>2016-07-24T22:48:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/my-google-io-hopes-and-predictions/google_io1.png" alt="Google I/O"></p>
<p>With Google I/O less than two months away, speculation is rife on what Google will announce. This list is more of a wish list than statements of what I believe will happen. I believe most of what I’ve laid out below is possible, however as with any speculation it’s exactly that — speculation. I don’t have any insider information, just my own thoughts.</p>
<a id="more"></a>
<ol>
<li><p><strong>Key Lime Pie.</strong> This is a given. The main question of everyone’s lips is Key Lime Pie features. Here’s a few things I’m thinking might be (and I hope will be) in Key Lime Pie:</p>
<ul>
<li><p><strong>Google Messaging.</strong> Rumours have been doing the rounds for quite some time now about Google finally consolidating their current messaging services into one, and I think Key Lime Pie is where it will debut. I think this service will be more than just an amalgamation of the existing services. I envisage it becoming more like an iMessage service, intertwining SMS into the service, replacing the default messaging app with this new, more advanced service. My main concern is whether they’ll bring this feature to previous versions of Android through the Play Store. I’m guessing yes, but it probably won’t replace the default messaging app, but instead either replace Google Talk, or be a completely separate app. I hope Google include an API in this new messaging app so that third party services can integrate into it. The idea of having all your messaging services aggregated into one interface seems like a killer feature, and hopefully Google see it in a similar light.</p>
</li>
<li><p><strong>Google Now API.</strong> This seems kind of obvious. Google’s recent Glass event showed off a Google Now-like cards interface for apps. They also announced that there would be an API for apps to plug into it. A similar API for Google Now would be pretty sweet, as long as apps don’t abuse it. I’d imagine this may not actually be exclusively for Android, but instead will be a REST API, with a wrapper for Android to abstract this fact. Google Now is coming to Chrome, as shown in the latest Chromium builds, Glass may very will be based on Google Now itself rather than a  Google Now-esque interface, and I can see Google adding Now to search on the web. So it makes sense that any data added, whether it be by an Android app or web app, be synced across all devices.</p>
</li>
<li><p><strong>Bluetooth 4.0 APIs.</strong> Please for the love of god standardise Bluetooth 4.0 access. Especially Bluetooth Low Energy. Services like Fitbit and the upcoming Automatic would love this, and it would only help accelerate the growth of the internet of things.</p>
</li>
<li><p><strong>App specific voice actions.</strong> This one is a long shot. It’s been rumoured before, and I wasn’t sure about it then, and I’m still not too sure about it now. What I’d like to see though is a mixture of two types of app voice actions — natural language actions, and Xbox 360 like contextual commands. I’m not going to go into anymore detail on my thoughts on this, because I’m not completely sold on the possibility yet.</p>
</li>
</ul>
</li>
<li><p><strong>Google TV rebirth.</strong> Google TV has potential. I’m sure Google realise this, despite poor performance so far. While I’m not quite sure on specifics, I think Key Lime Pie will bring Google TV in line with the rest of the Android device form factors, and also introduce Google TV to AOSP for the first time.</p>
</li>
<li><p><strong>Android @ Home</strong> finally ready. It’s been nearly two years since Google first announced Android @ Home, an attempt to bring home automation to the masses through Android. It sounded like a dream to techies like myself. With someone as big as Google backing a protocol, and building the backbone, smart appliances would gain traction, and bring home living into the connected future. Unfortunately though, Android @ Home disappeared off the face of the earth after Google I/O. Recently though, new Android @ Home references cropped up in Android 4.2.2’s code, bringing with it speculation that Google would revive the promising technology at this year’s Google I/O. I think the time is right for such tech now, and Google would be foolish to not try get in to the market now.</p>
</li>
<li><p><strong>Nexus Q relaunch.</strong> Hopefully with a price drop, Google will announce a new revision the Nexus Q. It will come with Key Lime Pie-flavoured Google TV, a remote for standalone use, a new phone/tablet remote app, Miracast support for mirroring your Nexus 4 and other supported devices and lastly, and for some most importantly, mesh network support. Google talked about Project Tungsten back at Google I/O 2011, an Android @ Home hub that served as a music endpoint (which the existing Nexus Q already does) and a bridge to an Android @ Home mesh network. They even showed off a spherical prototype, which although white, could easily have been the precursor to the Nexus Q. Whether Google decide to keep the Nexus Q name or not remains to be seen, but this seems like a no brainer if Google want to bring Google TV and Android @ Home into people’s homes.</p>
</li>
<li><p><strong>Google Now for Chrome.</strong> It’s coming. There’s no doubt. Google will probably announce it officially and roll it out on the stable Chrome channel along with the new notification center.</p>
</li>
<li><p><strong>Android and Chrome OS convergence.</strong> I’m not expecting much on this, but I predict there will be an announcement of the intention to merge Android and Chrome OS into one. Along with this, there’d probably be some prototype demoes of Android apps running on Chrome OS on a Pixel, and Chrome packaged apps running on Android, with access to native APIs.</p>
</li>
<li><p><strong>Google Reader replacement.</strong> Maybe? I can imagine them bringing Google Currents to the web, but really nothing can replace Google Reader without essentially being a Google Reader clone. I’m also expecting some Google+ feature that shares little with Reader in terms of functionality.</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/my-google-io-hopes-and-predictions/google_io1.png&quot; alt=&quot;Google I/O&quot;&gt;&lt;/p&gt;
&lt;p&gt;With Google I/O less than two months away, speculation is rife on what Google will announce. This list is more of a wish list than statements of what I believe will happen. I believe most of what I’ve laid out below is possible, however as with any speculation it’s exactly that — speculation. I don’t have any insider information, just my own thoughts.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android, Google, Chrome" scheme="https://daniel.brierton.me/tags/Android-Google-Chrome/"/>
    
  </entry>
  
  <entry>
    <title>Microsoft, Windows, Windows Phone, Xbox and SkyDrive</title>
    <link href="https://daniel.brierton.me/microsoft-windows-windows-phone-xbox-and-skydrive/"/>
    <id>https://daniel.brierton.me/microsoft-windows-windows-phone-xbox-and-skydrive/</id>
    <published>2012-02-19T00:00:00.000Z</published>
    <updated>2016-07-24T22:18:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>A bit of a long in the tooth title there, but since the rumours of SkyDrive getting a <a href="http://www.theverge.com/2012/2/18/2808445/skydrive-paid-storage-options-pc-mac-os-x-app" target="_blank" rel="external">Windows and Mac app and increased storage options</a>, I’ve been thinking about it’s role in Microsoft’s ecosystem.</p>
<a id="more"></a>
<p>SkyDrive is already baked into Windows Phone, so it’s a good reference point on what we might see from Microsoft in their upcoming products and updates. In it’s current form, it’s accessible from Office and Pictures. Office lets you open files from your SkyDrive, edit them, and save them back to your SkyDrive as if modifying a file on your local file system, which is pretty nice. Pictures is where SkyDrive integration shines. Any app that uses photos will let you browse through both your local storage and SkyDrive and use a photo the exact same regardless of its location, meaning I can have access to my entire photo library as if it were on my phone.</p>
<p>On the desktop end of things, Windows 8 will have the same functionality as above, with the added benefit of syncing system settings between devices. Windows 7 doesn’t have any support itself, but Office has integration of it’s own. Hopefully with the rumoured Windows and Mac apps, this will be addressed. I can only see one way Microsoft could introduce a parallel experience to Windows Phone and Windows 8: A mountable file system. Add your SkyDrive Pictures folder to your Pictures library, boom, SkyDrive and local pictures frolicking together as if on the same system. Make it the default save location for Documents, Pictures, Music, Videos, etc. and what do you have? SkyDrive is now your user folder.</p>
<p>I think this is what Microsoft are working towards. All your libraries reside on SkyDrive, so all your libraries are the same on all your Windows-powered devices. If they add in syncing of application data, then it will truly become your new user folder, and with 100GB available for $50 a year, a well capable, reasonably priced one.</p>
<p>I’ve yet to touch on the Xbox. The Xbox doesn’t have a file system, at least not one that resembles Windows. It does however have a library system of sorts. Introduce SkyDrive and you have instant access to your photos, videos and music, without needing to have your PC on.</p>
<p>If Microsoft can pull this off, I think it will be epic, and offer a truly consistent and integrated experience with little involvement from the user. I want this, Microsoft. I want this badly. If it works, it will be a great step forward in the war of ecosystems.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;A bit of a long in the tooth title there, but since the rumours of SkyDrive getting a &lt;a href=&quot;http://www.theverge.com/2012/2/18/2808445/skydrive-paid-storage-options-pc-mac-os-x-app&quot;&gt;Windows and Mac app and increased storage options&lt;/a&gt;, I’ve been thinking about it’s role in Microsoft’s ecosystem.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Microsoft, Windows, Xbox, Windows Phone" scheme="https://daniel.brierton.me/tags/Microsoft-Windows-Xbox-Windows-Phone/"/>
    
  </entry>
  
  <entry>
    <title>On Android Updates</title>
    <link href="https://daniel.brierton.me/on-android-updates/"/>
    <id>https://daniel.brierton.me/on-android-updates/</id>
    <published>2011-12-24T00:00:00.000Z</published>
    <updated>2016-07-24T22:18:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>I know it’s the popular thing to do at the moment, but I just have some thoughts on the issue that I’d like to share.</p>
<a id="more"></a>
<p><em>Samsung Galaxy S and Galaxy Tab</em><br>The topic was kicked off a few days ago when Samsung confirmed the Galaxy S, it’s most popular Android phone to date, and Galaxy Tab will not be getting Ice Cream Sandwich because of TouchWiz. I think this is a little bit of a bullshit excuse. With it’s current partition scheme, it probably won’t fit, but would it not be possible for them to release a manual update tool that will also repartition? Maybe it’s not, and if so, I take it back. But it still points out a very important thing — manufacturers skins do add bloat to Android, enough to block updates that users deserve.</p>
<p><em>The Nexus Program</em><br>Ok, so most people probably don’t care. Their phone works as it did when they bought it, they can still play Angry Birds, they’re happy. The general argument is, if you care about updates, buy a Nexus. But the Nexus program has a glaring issue. The fact that there is only one current generation device on sale at a time (not counting the mind-boggling number of Galaxy Nexus variations) means many have to either pay full price for a SIM free device, or switch network to get it on contract, sometimes resulting in far less value service. In Ireland, you can only get the Galaxy Nexus on Vodafone which, from what I can tell, is the worst value network in Ireland. Having carrier exclusivity deals really goes against what Nexus originally stood for.</p>
<p><em>The Solution</em><br>I think it’s time for Google to change the Nexus program. Google talk about choice, but there’s only one Nexus device released each year. I think Google should look towards the Windows Phone model — mandate particular hardware, and manage updates themselves. Manufacturers can still create their own skins with their own hardware, but they can also release one or two Nexus devices. Manufacturers should love this, as they can essentially forget about a phone after selling it and still keep existing customers happy. Google should love it because it will fall inline with their “choice” buzzword, and it will stop people from moving over to iPhone or Windows Phone to ensure consistent and speedy updates. And of course, techies will love it because they’ll get the latest version of Android to play with sooner rather than later (or never).</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I know it’s the popular thing to do at the moment, but I just have some thoughts on the issue that I’d like to share.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://daniel.brierton.me/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Microsoft XMPP Implementation Issues</title>
    <link href="https://daniel.brierton.me/so-microsoft-have-finally-caved-and-implemented/"/>
    <id>https://daniel.brierton.me/so-microsoft-have-finally-caved-and-implemented/</id>
    <published>2011-12-15T00:00:00.000Z</published>
    <updated>2016-07-24T22:19:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>So, Microsoft have finally caved and implemented an XMPP interface for Windows Live Messenger. It sounds great, but I feel they’ve messed up on a few things.</p>
<a id="more"></a>
<p><em>Custom login procedure</em><br>My initial thought was to open Adium and add my Windows Live account as an XMPP account. I found the XMPP server address (<a href="http://xmpp.messenger.live.com" target="_blank" rel="external">xmpp.messenger.live.com</a>) from some sample code they have on Github, but alas, it wouldn’t log in. Why? Microsoft have decided to use a custom OAuth 2 implementation for login, thus making all current XMPP clients incompatible. Ouch. So you can probably say goodbye to ever using WLM in iChat unless Microsoft decide to change it.</p>
<p><em>No write access to contacts list</em><br>Third party clients that decide to implement XMPP for WLM will find that they have no way of adding new contacts or accepting invitations from others. This has to be done in either Microsoft’s own client, or in a browser on web messenger. This kinda gimps third party clients for those who want to just rely on one interface, and one interface only.</p>
<p><em>XMPP Server Federation</em><br>I must preface this by mentioning that I’m not sure whether they support XMPP Federation or not. Microsoft go on about choice of services and not worrying about what your friends use, but there’s no clear mention of whether this means XMPP Federation. They mention Facebook and Yahoo by name, which as you may know, already have WLM integration. I attempted to add my Windows Live account to my Google Talk contacts list, but to no avail. One reason this is a big deal to me is that I’m expecting to get my hands on a Nokia Lumia 800 very soon, and would love to able to chat with my Google Talk contacts within the messaging hub on Windows Phone. It would be somewhat similar to the seamlessness of iMessage, although from what I can tell, not <em>quite</em> that seamless, but still awesome.</p>
<p><a href="http://windowsteamblog.com/windows_live/b/windowslive/archive/2011/12/14/anyone-can-build-a-windows-live-messenger-client-with-open-standards-access-via-xmpp.aspx" target="_blank" rel="external">Anyone can build a Messenger client—with open standards access via XMPP</a> - The official engineering blog for Hotmail, Messenger, SkyDrive, and Windows Live, hosted by The Windows Blog</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;So, Microsoft have finally caved and implemented an XMPP interface for Windows Live Messenger. It sounds great, but I feel they’ve messed up on a few things.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Microsoft" scheme="https://daniel.brierton.me/tags/Microsoft/"/>
    
  </entry>
  
  <entry>
    <title>What I Want From My Next Mobile OS</title>
    <link href="https://daniel.brierton.me/what-i-want-from-my-next-mobile-os/"/>
    <id>https://daniel.brierton.me/what-i-want-from-my-next-mobile-os/</id>
    <published>2011-02-16T00:00:00.000Z</published>
    <updated>2016-07-24T22:49:01.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/what-i-want-from-my-next-mobile-os/xoom-pre-macbook.png" alt=""></p>
<p>With the recent big announcements from Google, HP and Nokia, I’ve been left wondering what my next phone will be. In the end, I believe people will be buying into an ecosystem of devices. With HP’s tight integration between phone and tablet, and plans to bring it’s webOS to PCs and laptops in the near future, it’s clear that they want you to own HP throughout your gadgety collection. I love the look of the integration they’ve got going in webOS, but I’m not loving the idea of sticking with one manufacturer.</p>
<a id="more"></a>
<p>I love my MacBook, and I can’t imagine switching from Mac. So that would suggest iPhone might be the best option, in the hope that the next generation MacBooks and iPhone perhaps use NFC/Bluetooth to communicate, and offer a similar experience to webOS. But I’m bored of iOS. It’s become nothing more than a sea of icons to me, with no life outside of each individual application. Maybe I should pick up a Windows Phone 7 running Nokia, for the high build quality, coupled with an OS that is quite unique, and intrigues me somewhat. Windows Phone 7 is still in it’s infancy, so it’s hard to tell yet how that will pan out.</p>
<p>So, I want a UI that lives and breathes and gives me feedback throughout, integration with the other devices in my computing ecosystem, the developer support needed to sustain a modern mobile OS, and without being locked down to a single manufacturer. Android covers the UI and developer support, with a growing number of manufacturers to boot. At the moment it’s lacking that integration that I crave. That integration that I crave and lust for just isn’t there sadly. Perhaps Google are working on this behind closed doors. But one thing is pretty much certain – somebody will bring that integration through the Market. webOS to me, as a web developer with a high interest in mobile apps, seems to be the obvious choice, and if they were to bring out a 7” tablet alongside the Pre 3, I’d consider making the move. That said, webOS for tablets just seems to be the phone OS blown up big screen, much like the iPad. Android 3.0 Honeycomb shines through there. It’s properly built for a tablet, with it’s UI reworked from the ground up.</p>
<p>The perfect solution to me: Google, Apple, Microsoft and HP (along with whoever else wants to chime in) develop a set of protocols for cross device communication. Imagine a world where my Pre 3 can communicate with my Motorola Xoom and MacBook (my perfect setup – I think, although I’d rather a 7” tablet) with ease, and if swap out my Pre 3 for a Nokia Windows Phone 7 device and all works the same. Think of it, on each device a default program for handling a particular notification event, say an SMS. An SMS comes into my phone, pushes a notification to any connected device, which then launches the default action for that event, which may or may not know how to respond to it. I think all the manufacturers win in this scenario, because consumers wouldn’t feel apprehensive about changing platform.</p>
<p>Sadly, I can’t see this happening. Apple are already separating themselves by using AirPlay instead of embracing DLNA, and I can see further differentiation. I still hold hope that something can be done to alleviate the incompatibility, but I highly doubt a perfect solution.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/what-i-want-from-my-next-mobile-os/xoom-pre-macbook.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;With the recent big announcements from Google, HP and Nokia, I’ve been left wondering what my next phone will be. In the end, I believe people will be buying into an ecosystem of devices. With HP’s tight integration between phone and tablet, and plans to bring it’s webOS to PCs and laptops in the near future, it’s clear that they want you to own HP throughout your gadgety collection. I love the look of the integration they’ve got going in webOS, but I’m not loving the idea of sticking with one manufacturer.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android, iOS, webOS" scheme="https://daniel.brierton.me/tags/Android-iOS-webOS/"/>
    
  </entry>
  
  <entry>
    <title>Android&#39;s Update Evolution</title>
    <link href="https://daniel.brierton.me/androids-update-evolution/"/>
    <id>https://daniel.brierton.me/androids-update-evolution/</id>
    <published>2010-12-30T00:00:00.000Z</published>
    <updated>2016-07-24T22:49:10.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/androids-update-evolution/android-gingerbread.png" alt=""></p>
<p>I, like many others, was quite disappointed about the Gingerbread announcement from a user perspective. The UI is nothing new to anyone who has tried out a few custom ROMs bar a few little touches, most of which could probably be implemented in Froyo if any ROM developer wanted to. The new APIs available to developers are nice, but from a user’s view there wasn’t much to be loved. It was really a developer’s release more than anything. I know Honeycomb will have a UI overhaul, but I expected elements of that in Gingerbread. So yeah, disappointed would be an apt description.</p>
<a id="more"></a> 
<p>But then it occurred to me, what makes a new version of an OS exciting? Take a look at iOS 4.2.1, it brought AirPlay and AirPrint to iDevices, as well as some updates to the core OS apps. And that was able to excite iOS users, purely because there was some great user facing enhancements included with the updated APIs and bug fixes. Google stated after Froyo that their development cycle would slow down for subsequent updates. But really, this couldn’t be further from the truth. The way I look at it, they’ve sped up their cycle, and they’ve done so for the better.</p>
<p>Compare your device when you first updated to Froyo to what it is now, and, you’ll see that it’s like a completely new OS on your phone. There was Voice Search, now there’s Voice Actions. There was a fairly decent YouTube app, now there’s an awesome YouTube app. Car Home is now customisable. Gmail has a nicer UI and more features. Maps has had many updates, with the best to come in version 5 of one of Android’s killer apps. And Market has been getting some updates recently to enhance the experience.</p>
<p>So perhaps it’s not right to see Gingerbread as a lacklustre OS update, but instead as the start of another ongoing evolution of Android. Some people (myself included) wanted DLNA support built in, but Google could release an app on the Market for that. An updated Calendar app? Market. Google’s rumoured cloud music service? Market. And the beauty of it all - if you don’t want a feature, don’t install it, and there’s no need for it bog down your older, lower powered phone, like what has been seen with iOS 4.</p>
<p>I’m excited to see what Google has in store for Android over the coming months between now and Honeycomb. Who knows, maybe Honeycomb will introduce the modularity needed to deploy updates to all devices through Market irrespective of OEM customisations such as Sense or TouchWiz.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/androids-update-evolution/android-gingerbread.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;I, like many others, was quite disappointed about the Gingerbread announcement from a user perspective. The UI is nothing new to anyone who has tried out a few custom ROMs bar a few little touches, most of which could probably be implemented in Froyo if any ROM developer wanted to. The new APIs available to developers are nice, but from a user’s view there wasn’t much to be loved. It was really a developer’s release more than anything. I know Honeycomb will have a UI overhaul, but I expected elements of that in Gingerbread. So yeah, disappointed would be an apt description.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://daniel.brierton.me/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>OS X Lion, Yay or Nay?</title>
    <link href="https://daniel.brierton.me/os-x-lion-yay-or-nay/"/>
    <id>https://daniel.brierton.me/os-x-lion-yay-or-nay/</id>
    <published>2010-10-22T23:00:00.000Z</published>
    <updated>2016-07-24T22:48:44.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/os-x-lion-yay-or-nay/osx-ipad-gt-osx.jpg" alt=""></p>
<p>With the recent Mac event from Apple, I’ve been asking myself, do I like where OS X is going? I’ve only recently enough become a Mac user, picking up a Macbook about a year and a half ago now, so I’ve only ever used Leopard and Snow Leopard. I guess that’s enough time to get over comfortable in an OS. Using Windows or Linux now feels a little alien to me, despite being a Windows user all my life, and using Ubuntu for a significant amount of time.</p>
<a id="more"></a>
<p>I love my iPhone, but the whole experience got a little boring for me. I’ve always been jailbroken since 1.1.4 on my original iPhone, so I’ve always had the customisations available on Installer and Cydia, but around the middle of summer, I got fed up and got myself a HTC Desire, and made the leap to Android. I’ll never look back. Which brings me back to my original point - Do I really want my desktop OS to become more like iOS?</p>
<h2 id="Do-I-really-want-to-limit-myself-to-seeing-one-app-at-a-time"><a href="#Do-I-really-want-to-limit-myself-to-seeing-one-app-at-a-time" class="headerlink" title="Do I really want to limit myself to seeing one app at a time?"></a>Do I really want to limit myself to seeing one app at a time?</h2><p>It has it’s uses, sure. Hell, I’m using WriteRoom in full screen to type this, but for the most part, I like having windows. I like seeing my contact list on Adium along a strip on the side of my screen, with my browser taking up the rest of the screen. I like spreading this out more on my external monitor. I like being able to see things at a glance. Who’s online, conversations on IRC, whatever webpage I’m on at the moment, my Twitter stream. It’s one thing I never did in Windows (I’m not actually sure why), and something I’m now very used to in OS X. Thankfully this won’t be the only option for developers, but I hope we don’t see apps that force you into full screen, replicating the iOS feel entirely. At least with Mission Control there’s a nice simple way of moving between them.</p>
<h2 id="Do-I-want-my-main-software-source-to-be-an-App-Store"><a href="#Do-I-want-my-main-software-source-to-be-an-App-Store" class="headerlink" title="Do I want my main software source to be an App Store?"></a>Do I want my main software source to be an App Store?</h2><p>In short, yes. I’ve seen the App Store on iPhone revolutionise the mobile platform. And even Installer before that was epic in my books. I can’t say I’m thrilled about an approval process being put in place, but if in return I get a wider range of software, that looks and feels better than current offerings, all from a simple clean interface, I’m all for it.</p>
<h2 id="Do-I-want-Launchpad"><a href="#Do-I-want-Launchpad" class="headerlink" title="Do I want Launchpad?"></a>Do I want Launchpad?</h2><p>No. I like my Application stack. I love Spotlight. It’s all I need to open up an app. I don’t need to worry about arranging icons meticulously across home screens for easy access, then try search through them for an app when I need it. Any regular apps will fit in my Dock. I know it’s a layer on top of OS X, so it’s completely optional, but still, it’s a layer I’d rather not have there. I’m hoping there is the option to completely disable it.</p>
<h2 id="Does-Mission-Control-look-better-than-Expose-Spaces-Dashboard"><a href="#Does-Mission-Control-look-better-than-Expose-Spaces-Dashboard" class="headerlink" title="Does Mission Control look better than Exposé/Spaces/Dashboard?"></a>Does Mission Control look better than Exposé/Spaces/Dashboard?</h2><p>Yeah, definitely. Grouping windows of the same app together, although looking like it was borrowed from WebOS 2.0, will be a great addition. Exposé really does loose effectiveness when you have a few Finder windows open, along with a few documents, among your browser, IM, etc. So grouping the various apps together will definitely increase visibility of all my windows. I barely use Dashboard at the moment, but if it’s just a quick multi-touch gesture away, I may use it more. This is a matter of wait and see, I’ll probably forget about it again like I currently do. Spaces is another feature I never really use, so seeing this being transformed as a way of switching between full screen apps, Dashboard and my desktop is certainly welcome.</p>
<h2 id="What-about-other-UI-elements"><a href="#What-about-other-UI-elements" class="headerlink" title="What about other UI elements?"></a>What about other UI elements?</h2><p>Well, Apple didn’t really say much about these, but there did seem to be two things that emerged from their demos and screenshots, the Dock and Scrollbars. I’m a little confused about things I’ve been hearing about the Dock, and I think it’s one of those things I’ll just have to use to fully understand, but from people’s interpretations, I’m not loving it. But these interpretations could of course be completely wrong, so I think this is one point I’ll just have to bow out of debates on. Disappearing scrollbars seem for the most part to be a good, nice looking idea, but I can see some downfalls. I’m hoping the SDK allows developers to set whether the scrollbar is visible or not, in case it’s not totally obvious that a pane is scrollable.</p>
<p>Overall, I’m both excited and cautious about these developments in OS X. I guess in the end if it means I have a more app-rich OS, that continues to deliver what I love about Mac, along with a few other improvements and niceties, I’ll be happy.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/os-x-lion-yay-or-nay/osx-ipad-gt-osx.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;With the recent Mac event from Apple, I’ve been asking myself, do I like where OS X is going? I’ve only recently enough become a Mac user, picking up a Macbook about a year and a half ago now, so I’ve only ever used Leopard and Snow Leopard. I guess that’s enough time to get over comfortable in an OS. Using Windows or Linux now feels a little alien to me, despite being a Windows user all my life, and using Ubuntu for a significant amount of time.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
